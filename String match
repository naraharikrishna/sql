Created By: Narahari Krishna
Create Date: 03/26/2019

Create  FUNCTION [dbo].[Stringmatch]  ( @SourceString nvarchar(4000), @TargetString nvarchar(4000) ) 
--Returns the Damerau Levenshtein Distance between @SourceString string and @TargetString

returns int
as
BEGIN
DECLARE @Matrix Nvarchar(4000), @LD int, @TargetStringLength int, @SourceStringLength int,
@ii int, @jj int, @CurrentSourceChar nchar(1), @CurrentTargetChar nchar(1),@Cost int, 
@Above int,@AboveAndToLeft int,@ToTheLeft int, @MinimumValueOfCells INT, @previous INT
 
  SELECT @SourceString=RTRIM(LTRIM(COALESCE(@sourceString,''))),
         @TargetString=RTRIM(LTRIM(COALESCE(@TargetString,''))),
		 @SourceStringLength=LEN(@SourceString), 
         @TargetStringLength=LEN(@TargetString)
 
  IF SUBSTRING(@sourceString,1,1)=SUBSTRING(@targetString,1,1)
  BEGIN
  SET @ii=1
  WHILE SUBSTRING(@sourceString+'!!',@ii+1,1)=SUBSTRING(@targetString+'??',@ii+1,1)
    BEGIN
    SELECT @ii=@ii+1 
    END
  SELECT @sourceString=STUFF(@sourceString,1,@ii,''),
         @targetString=STUFF(@targetString,1,@ii,'')
  END
 
 SELECT @SourceStringLength =LEN(@sourceString), @TargetStringLength =LEN(@TargetString) 
 IF SUBSTRING(@sourceString,@SourceStringLength,1)=SUBSTRING(@targetString,@TargetStringLength,1)
  BEGIN
  WHILE SUBSTRING(@sourceString,@SourceStringLength-1,1)=SUBSTRING(@targetString,@TargetStringLength-1,1) 
	AND @SourceStringLength>0 AND @TargetStringLength>0
    BEGIN
    SELECT @SourceStringLength=@SourceStringLength-1,
	       @TargetStringLength=@TargetStringLength-1
	END
  SELECT @sourceString=LEFT(@sourceString,@SourceStringLength)
  SELECT @targetString=LEFT(@targetString,@TargetStringLength)
  END

If @SourceStringLength = 0 return @TargetStringLength
If @TargetStringLength = 0 return @SourceStringLength
if (@TargetStringLength+1)*(@SourceStringLength+1)> 4000 return -1
  IF @SourceStringLength=1 
    RETURN @TargetStringLength
          -CASE WHEN CHARINDEX(@SourceString,@TargetString)>0 THEN 1 ELSE 0 end
  IF @TargetStringLength=1 
    RETURN @SourceStringLength
          -CASE WHEN CHARINDEX(@TargetString,@SourceString)>0 THEN 1 ELSE 0 end
SELECT @Matrix=replicate(nchar(0),(@SourceStringLength+1)*(@TargetStringLength+1))

SET @ii=0
WHILE @ii<=@SourceStringLength
    BEGIN
    SET @Matrix=STUFF(@Matrix,@ii+1,1,nchar(@ii))--d(i, 0) = i
    SET @ii=@ii+1
    END
SET @ii=0
WHILE @ii<=@TargetStringLength
    BEGIN
    SET @Matrix=STUFF(@Matrix,@ii*(@SourceStringLength+1)+1,1,nchar(@ii))--d(0, j) = j
    SET @ii=@ii+1
    END
SET @ii=1
WHILE @ii<=@SourceStringLength
    BEGIN
    
    SET @jj=1
    WHILE @jj<=@TargetStringLength
        BEGIN
        Select 
        
		@Cost=case when (substring(@SourceString,@ii,1)) = (substring(@TargetString,@jj,1)) 
            then 0 else 1 END,
        @Above         =unicode(substring(@Matrix, @jj *  (@SourceStringLength+1)+@ii-1+1,1))+1,
        @ToTheLeft     =unicode(substring(@Matrix,(@jj-1)*(@SourceStringLength+1)+@ii+1  ,1))+1,
        @AboveAndToLeft=unicode(substring(@Matrix,(@jj-1)*(@SourceStringLength+1)+@ii-1+1,1))+@cost,
        @previous      =unicode(substring(@Matrix,(@jj-2)*(@SourceStringLength+1)+@ii-2+1,1))+@cost
     
        if (@Above < @ToTheLeft) AND (@Above < @AboveAndToLeft) 
            select @MinimumValueOfCells=@Above
      else if (@ToTheLeft < @Above) AND (@ToTheLeft < @AboveAndToLeft)
            select @MinimumValueOfCells=@ToTheLeft
        else
            select @MinimumValueOfCells=@AboveAndToLeft
        IF (substring(@SourceString,@ii,1) = substring(@TargetString,@jj-1,1) 
              and substring(@TargetString,@jj,1) = substring(@SourceString,@ii-1,1))
            begin
			SELECT @MinimumValueOfCells = 
			  CASE WHEN @MinimumValueOfCells< @previous 
				THEN @MinimumValueOfCells ELSE @previous END 
			  end  
			
		SELECT @Matrix=STUFF(@Matrix,
                   @jj*(@SourceStringLength+1)+@ii+1,1,
                   nchar(@MinimumValueOfCells)),
           @jj=@jj+1
        END
    SET @ii=@ii+1
    END    
return unicode(substring(
   @Matrix,@SourceStringLength*(@TargetStringLength+1)+@TargetStringLength+1,1
   ))
END
